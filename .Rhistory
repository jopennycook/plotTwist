<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
library(ggplot2)
use_package('ggplot2')
use_package('grid')
document()
warnings()
>>>>>>> 4198c47cd0dc4a4dc266fa10a9da42f60c9c3d57
document()
library(plotTwist)
devtools::document()
library(plotTwist)
library(plotTwist)
document()
devtools::document()
library(plotTwist)
library(plotTwist)
document()
devtools::document()
?is.missing
??is_missing
devtools::document()
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(devtools)
use_r("geom_patch")
document()
library(plotTwist)
document()
devtools::document()
library(plotTwist)
?data.frame
??data.frame
devtools::document()
library(plotTwist)
?seq
library(plotTwist)
library(plotTwist)
library(plotTwist)
seq(0, 1, 1.5)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
??polylineGrob
grid.draw(polylineGrob(x = c(1, 2, 3), y = c(1, 2, 3), gp = gpar(colour = "red")))
library(grid)
grid.draw(polylineGrob(x = c(1, 2, 3), y = c(1, 2, 3), gp = gpar(colour = "red")))
grid.draw(polylineGrob(x = c(1, 2, 3), y = c(1, 2, 3)))
grid.draw(polylineGrob(x = c(0.1, 0.2, 0.3), y = c(0.1, 0.2, 0.3)))
grid.draw(polylineGrob(x = c(0.1, 0.2, 0.3), y = c(0.1, 0.2, 0.3), gp = gpar(colour = "red")))
grid.draw(polylineGrob(x = c(0.1, 0.2, 0.3), y = c(0.1, 0.2, 0.3), gp = gpar(col = "red")))
grid.draw(polylineGrob(x = c(0.1, 0.2, 0.3), y = c(0.1, 0.2, 0.3), gp = gpar(col = "red", lwd = 2)))
grid.draw(polylineGrob(x = c(0.1, 0.2, 0.3), y = c(0.1, 0.2, 0.3), gp = gpar(col = "red", linewidth = 2)))
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(devtools)
use_r("patchGrob")
document()
?patchGrob
document()
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(plotTwist)
document()
devtools::document()
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(devtools)
use_r("geom_pattern")
document()
library(plotTwist)
devtools::documents()
library(plotTwist)
devtools::document()
library(plotTwist)
library(plotTwist)
library(plotTwist)
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- width - tail(width_points, 1)
height2_points <- seq(outline_spacing - w_partial,
height, outline_spacing)
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
width2_points <- seq(outline_spacing - h_partial,
width, outline_spacing)
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
diag_stripe_points(3, 3, 1)
diag_stripe_points(0.01, 3, 1)
width <- 3
height <- 5
spacing <- 1
flip = FALSE
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
seq(outline_spacing, width, outline_spacing)
width_points <- seq(outline_spacing, width, outline_spacing)
width - tail(width_points, 1)
w_partial
w_partial <- width - tail(width_points, 1)
w_partial
outline_spacing - w_partial
height
outline_spacing
seq(outline_spacing - w_partial,
height, outline_spacing)
height = 0.01
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
outline_spacing
seq(outline_spacing, width, outline_spacing)
width_points <- seq(outline_spacing, width, outline_spacing)
width - tail(width_points, 1)
w_partial <- width - tail(width_points, 1)
seq(outline_spacing - w_partial,
height, outline_spacing)
seq(outline_spacing - w_partial,
height, outline_spacing)
numeric()
outline_spacing
height
outline_spacing
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- width - tail(width_points, 1)
} else {
width_points <- numeric()
w_partial <- outline_spacing - width
}
if(w_partial < height) {
height2_points <- seq(outline_spacing - w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
>>>>>>> d6a17d3590b3f38bf32edf7b386464efaef5d0a2
} else {
height_points <- numeric()
h_partial <- outline_spacing - height
}
if(h_partial < width) {
width2_points <- seq(outline_spacing - h_partial,
width, outline_spacing)
} else {
width2_points <- numeric()
}
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
diag_stripe_points(0.01, 3, 1)
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
width
height
outline_spacing
(outline_spacing < width)
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- width - tail(width_points, 1)
}
(outline_spacing < width)
seq(outline_spacing, width, outline_spacing)
width_points <- seq(outline_spacing, width, outline_spacing)
width - tail(width_points, 1)
w_partial <- width - tail(width_points, 1)
(w_partial < height)
height2_points <- numeric()
outline_spacing < height)
outline_spacing < height
height_points <- numeric()
outline_spacing - height
h_partial <- outline_spacing - height
(h_partial < width)
seq(outline_spacing - h_partial,
width, outline_spacing)
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
} else {
height_points <- numeric()
h_partial <- outline_spacing - height
}
(h_partial < width)
outline_spacing
h_partial
width
outline_spacing
seq(outline_spacing - h_partial,
width, outline_spacing)
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- width - tail(width_points, 1)
} else {
width_points <- numeric()
w_partial <- outline_spacing - width
}
if(w_partial < height) {
height2_points <- seq(outline_spacing - w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
} else {
height_points <- numeric()
h_partial <- outline_spacing - height
}
width_points
seq(outline_spacing - h_partial,
width, outline_spacing)
outline_spacing
height
outline_spacing - height
h_partial
height
outline_spacing
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- width - tail(width_points, 1)
} else {
width_points <- numeric()
w_partial <- width
}
if(w_partial < height) {
height2_points <- seq(outline_spacing - w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
} else {
height_points <- numeric()
h_partial <- height
}
if(h_partial < width) {
width2_points <- seq(outline_spacing - h_partial,
width, outline_spacing)
} else {
width2_points <- numeric()
}
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
diag_stripe_points(0.01, 3, 1)
diag_stripe_points(3, 0.01, 1)
library(plotTwist)
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- width - tail(width_points, 1)
} else {
width_points <- numeric()
w_partial <- width
}
if(w_partial < height) {
height2_points <- seq(outline_spacing - w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
} else {
height_points <- numeric()
h_partial <- height
}
if(h_partial < width) {
width2_points <- seq(outline_spacing - h_partial,
width, outline_spacing)
} else {
width2_points <- numeric()
}
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
seq(0.1, 10, 0.1)
?diag_stripe_points
lapply(seq(0.1, 10, 0.1), function(x) {
diag_stripe_points(x, 1, 0.1)
})
diag_stripe_points(0.1, 1, 0.1)
diag_stripe_points(0.2, 1, 0.1)
diag_stripe_points(0.3, 1, 0.1)
diag_stripe_points(0.4, 1, 0.1)
diag_stripe_points(0.5, 1, 0.1)
diag_stripe_points(0.6, 1, 0.1)
diag_stripe_points(0.7, 1, 0.1)
diag_stripe_points(0.8, 1, 0.1)
diag_stripe_points(0.9, 1, 0.1)
diag_stripe_points(1.0, 1, 0.1)
diag_stripe_points(1.1, 1, 0.1)
diag_stripe_points(1.2, 1, 0.1)
diag_stripe_points(1.3, 1, 0.1)
diag_stripe_points(1.4, 1, 0.1)
width <- 0.1
height <- 1
spacing <- 0.1
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
outline_spacing
(outline_spacing < width)
width_points <- numeric()
w_partial <- width
w_partial
seq(outline_spacing - w_partial,
height, outline_spacing)
outline_spacing
(w_partial < height)
seq(outline_spacing - w_partial,
height, outline_spacing)
height2_points <- seq(outline_spacing - w_partial,
height, outline_spacing)
(outline_spacing < height)
seq(outline_spacing, height, outline_spacing)
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- height - tail(height_points, 1)
(h_partial < width)
seq(outline_spacing - h_partial,
width, outline_spacing)
height_points
h_partial
h_partial
width
h_partial < width
outline_spacing
h_partial
outline_spacing - h_partial
width
outline_spacing - h_partial
outline_spacing
outline_spacing - h_partial,
outline_spacing - h_partial
width
width <- 0.1
height <- 1
spacing <- 0.1
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
(outline_spacing < width)
width_points <- numeric()
w_partial <- outline_spacing - width
w_partial
(w_partial < height)
seq(w_partial,
height, outline_spacing)
height2_points <- seq(w_partial,
height, outline_spacing)
(outline_spacing < height)
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- outline_spacing - (height - tail(height_points, 1))
(h_partial < width)
width2_points <- numeric()
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- outline_spacing - (width - tail(width_points, 1))
} else {
width_points <- numeric()
w_partial <- outline_spacing - width
}
if(w_partial < height) {
height2_points <- seq(w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- outline_spacing - (height - tail(height_points, 1))
} else {
height_points <- numeric()
h_partial <- outline_spacing - height
}
if(h_partial < width) {
width2_points <- seq(h_partial,
width, outline_spacing)
} else {
width2_points <- numeric()
}
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
lapply(seq(0.1, 10, 0.1), function(x) {
diag_stripe_points(x, 1, 0.1)
})
seq(1, 1, 1)
seq(1, 1, 1.4)
w_partial
height
w_partial
height
outline_spacing
seq(0.2, 1, 1)
library(plotTwist)
devtools::document()
library(plotTwist)
library(scales)
cube_root <- trans_new(
name = "cube_root",
transform = function(x) x ^ (1 / 3),
inverse = function(x) x ^ 3)
tesseract_root <- trans_new(
name = "tesseract_root",
transform = function(x) x ^ (1 / 4),
inverse = function(x) x ^ 4)
usethis::use_data(cube_root)
usethis::use_data(tesseract_root)
devtools::document()
library(plotTwist)
c(1, 0.309, -0.810, -0.810, 0.309, 1))
c(1, 0.309, -0.810, -0.810, 0.309, 1)
c(1, 0.309, -0.810, -0.810, 0.309, 1) - 1
c(1, 0.309, -0.810, -0.810, 0.309, 1) * -1
list("x" = c(0, 0.952, 0.589, -0.589, -0.952, 0,
0.952, 0, 0, 0, 0.952, 0, 0.589, 0, -0.589,
0, -0.952),
"y" = c(1, 0.309, -0.810, -0.810, 0.309, 1,
0.309, 0, 1, 0, 0.309, 0, -0.810, 0, -0.810,
0, 0.309) * -1,
"poly" = c(1, 1, 1, 1, 1, 1, 1,
2, 2, 3, 3, 4, 4, 5, 5, 6, 6))
library(plotTwist)
library(plotTwist)
install.packages("Rtools")
install.packages("devtools")
library(plotTwist)
install.packages("rtools")
library(plotTwist)
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
Sys.which("make")
Sys.which("make")
library(plotTwist)
library(plotTwist)
library(plotTwist)
library(devtools)
use_r("geom_symbolswarm")
document()
document()
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- outline_spacing - (width - tail(width_points, 1))
} else {
width_points <- numeric()
w_partial <- outline_spacing - width
}
if(w_partial < height) {
height2_points <- seq(w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- outline_spacing - (height - tail(height_points, 1))
} else {
height_points <- numeric()
h_partial <- outline_spacing - height
}
if(h_partial < width) {
width2_points <- seq(h_partial,
width, outline_spacing)
} else {
width2_points <- numeric()
}
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
orth_stripe_points <- function(width, height, spacing, hori = FALSE) {
if (hori == TRUE) {
from_x <- seq(0, width, spacing)
to_x <- from_x
from_y <- rep(height, length(from_x))
to_y <- rep(0, length(from_x))
} else {
from_y <- seq(0, height, spacing)
to_y <- from_y
from_x <- rep(width, length(from_y))
to_x <- rep(0, length(from_y))
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
stripe_points <- function(width, height, spacing, alt = F, stripe = T, orth = T, hatch = F) {
if (stripe) {
if (orth) {
if (hatch) {
output <- rbind(orth_stripe_points(width, height, spacing, T),
orth_stripe_points(width, height, spacing, F))
} else {
output <- orth_stripe_points(width, height, spacing, alt)
}
} else {
if (hatch) {
output <- rbind(diag_stripe_points(width, height, spacing, T),
diag_stripe_points(width, height, spacing, F))
} else {
output <- diag_stripe_points(width, height, spacing, alt)
}
}
} else {
output <- orth_stripe_points(0, 0, 0)
}
output
}
stripe_points(1, 1, 0.1)
stripe_points(1, 1, 2)
stripe_points(1, 0, 2)
stripe_points(1, 0, 2, orth = F)
stripe_points(1, 0, 1, orth = F)
stripe_points(1.1, 0, 1, orth = F)
stripe_points(2, 0, 1)
diag_stripe_points <- function(width, height, spacing, flip = FALSE) {
if(width == 0 | height == 0) {
from_x <- 0
to_x <- 0
from_y <- 0
to_y <- 0
} else {
outline_spacing <- (2 * (spacing ^ 2)) ^ 0.5
if (outline_spacing < width) {
width_points <- seq(outline_spacing, width, outline_spacing)
w_partial <- outline_spacing - (width - tail(width_points, 1))
} else {
width_points <- numeric()
w_partial <- outline_spacing - width
}
if(w_partial < height) {
height2_points <- seq(w_partial,
height, outline_spacing)
} else {
height2_points <- numeric()
}
if (outline_spacing < height) {
height_points <- seq(outline_spacing, height, outline_spacing)
h_partial <- outline_spacing - (height - tail(height_points, 1))
} else {
height_points <- numeric()
h_partial <- outline_spacing - height
}
if(h_partial < width) {
width2_points <- seq(h_partial,
width, outline_spacing)
} else {
width2_points <- numeric()
}
from_x <- c(rep(0, length(height_points)), width2_points)
from_y <- c(height_points, rep(height, length(width2_points)))
to_x <- c(width_points, rep(width, length(height2_points)))
to_y <- c(rep(0, length(width_points)), height2_points)
if(flip == TRUE) {
from_y <- height - from_y
to_y <- (to_y - height) * -1
}
}
data.frame("from_x" = from_x,
"from_y" = from_y,
"to_x" = to_x,
"to_y" = to_y)
}
library(plotTwist)
library(plotTwist)
?element_markdown
#' Title
#'
#' @return
#' @import ggplot2
#' @import ggtext
#' @export
#'
#' @examples
simple_theme <- function() {
theme(axis.title.x = element_markdown(family = "sans", size = 12),
axis.title.y = element_markdown(family = "sans", size = 12),
axis.text.x = element_markdown(family = "sans", size = 9, colour = "black"),
axis.text.y = element_markdown(family = "sans", size = 9, colour = "black"),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.ticks = element_line(linewidth = 0.5, colour = "black"),
strip.text.x = element_markdown(family = "sans", size = 9, colour = "black"),
strip.text.y = element_markdown(family = "sans", size = 9, colour = "black"),
strip.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.background = element_rect(fill = "white", colour = "black", linewidth = 1),
legend.background = element_blank(), legend.key = element_blank(),
legend.title = element_markdown(family = "sans", size = 12),
legend.title.align = 0.5,
legend.text = element_markdown(family = "sans", size = 9, colour = "black"))
}
library(plotTwist)
